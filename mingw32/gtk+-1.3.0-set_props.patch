diff -ur gtk+-1.3.0-orig/gtk/gtk.def gtk+-1.3.0/gtk/gtk.def
--- gtk+-1.3.0-orig/gtk/gtk.def	Mon Jun 23 13:15:04 2003
+++ gtk+-1.3.0/gtk/gtk.def	Mon Jun 23 12:32:08 2003
@@ -1365,3 +1365,5 @@
 	gtk_window_set_title
 	gtk_window_set_transient_for
 	gtk_window_set_wmclass
+	gtk_style_set_prop_experimental
+	gtk_style_get_prop_experimental
diff -ur gtk+-1.3.0-orig/gtk/gtkhscrollbar.c gtk+-1.3.0/gtk/gtkhscrollbar.c
--- gtk+-1.3.0-orig/gtk/gtkhscrollbar.c	Thu Feb 22 20:47:40 2001
+++ gtk+-1.3.0/gtk/gtkhscrollbar.c	Mon Jun 23 12:57:28 2003
@@ -47,6 +47,8 @@
                                              GtkArg             *arg,
                                              guint               arg_id);
 static void gtk_hscrollbar_realize          (GtkWidget          *widget);
+static void gtk_hscrollbar_size_request     (GtkWidget          *widget,
+                                             GtkRequisition     *requisition);
 static void gtk_hscrollbar_size_allocate    (GtkWidget          *widget,
                                              GtkAllocation      *allocation);
 static void gtk_hscrollbar_draw_step_forw   (GtkRange           *range);
@@ -104,6 +106,7 @@
   object_class->get_arg = gtk_hscrollbar_get_arg;
   
   widget_class->realize = gtk_hscrollbar_realize;
+  widget_class->size_request = gtk_hscrollbar_size_request;
   widget_class->size_allocate = gtk_hscrollbar_size_allocate;
   
   range_class->draw_step_forw = gtk_hscrollbar_draw_step_forw;
@@ -156,18 +159,6 @@
 static void
 gtk_hscrollbar_init (GtkHScrollbar *hscrollbar)
 {
-  GtkWidget *widget;
-  GtkRequisition *requisition;
-  
-  widget = GTK_WIDGET (hscrollbar);
-  requisition = &widget->requisition;
-  
-  requisition->width = (RANGE_CLASS (widget)->min_slider_size +
-                        RANGE_CLASS (widget)->stepper_size +
-                        RANGE_CLASS (widget)->stepper_slider_spacing +
-                        widget->style->klass->xthickness) * 2;
-  requisition->height = (RANGE_CLASS (widget)->slider_width +
-                         widget->style->klass->ythickness * 2);
 }
 
 GtkWidget*
@@ -189,6 +180,9 @@
   GtkRange *range;
   GdkWindowAttr attributes;
   gint attributes_mask;
+  gint slider_width;
+  gint trough_border;
+  gint stepper_size;
   
   g_return_if_fail (widget != NULL);
   g_return_if_fail (GTK_IS_HSCROLLBAR (widget));
@@ -196,6 +190,9 @@
   GTK_WIDGET_SET_FLAGS (widget, GTK_REALIZED);
   range = GTK_RANGE (widget);
   
+  _gtk_range_get_props (range, &slider_width, &trough_border,
+			&stepper_size, NULL);
+
   attributes.x = widget->allocation.x;
   attributes.y = widget->allocation.y + (widget->allocation.height - widget->requisition.height) / 2;
   attributes.width = widget->allocation.width;
@@ -217,23 +214,23 @@
   range->trough = widget->window;
   gdk_window_ref (range->trough);
   
-  attributes.x = widget->style->klass->xthickness;
-  attributes.y = widget->style->klass->ythickness;
-  attributes.width = RANGE_CLASS (widget)->stepper_size;
-  attributes.height = RANGE_CLASS (widget)->stepper_size;
+  attributes.x = trough_border;
+  attributes.y = trough_border;
+  attributes.width = stepper_size;
+  attributes.height = stepper_size;
   
   range->step_back = gdk_window_new (range->trough, &attributes, attributes_mask);
   
   attributes.x = (widget->allocation.width -
-                  widget->style->klass->xthickness -
-                  RANGE_CLASS (widget)->stepper_size);
+                  trough_border -
+                  stepper_size);
   
   range->step_forw = gdk_window_new (range->trough, &attributes, attributes_mask);
   
   attributes.x = 0;
-  attributes.y = widget->style->klass->ythickness;
+  attributes.y = trough_border;
   attributes.width = RANGE_CLASS (widget)->min_slider_size;
-  attributes.height = RANGE_CLASS (widget)->slider_width;
+  attributes.height = slider_width;
   attributes.event_mask |= (GDK_BUTTON_MOTION_MASK |
                             GDK_POINTER_MOTION_HINT_MASK);
   
@@ -260,10 +257,35 @@
 }
 
 static void
+gtk_hscrollbar_size_request (GtkWidget      *widget,
+			     GtkRequisition *requisition)
+{
+  gint slider_width;
+  gint trough_border;
+  gint stepper_size;
+  gint stepper_spacing;
+  
+  GtkRange *range = GTK_RANGE (widget);
+
+  _gtk_range_get_props (range, &slider_width, &trough_border, 
+			&stepper_size, &stepper_spacing);
+  
+  requisition->width = (RANGE_CLASS (widget)->min_slider_size +
+			stepper_size +
+			stepper_spacing +
+			trough_border) * 2;
+  requisition->height = (slider_width +
+			 trough_border * 2);
+}
+
+static void
 gtk_hscrollbar_size_allocate (GtkWidget     *widget,
                               GtkAllocation *allocation)
 {
   GtkRange *range;
+  gint slider_width;
+  gint trough_border;
+  gint stepper_size;
   
   g_return_if_fail (widget != NULL);
   g_return_if_fail (GTK_IS_HSCROLLBAR (widget));
@@ -273,25 +295,28 @@
   if (GTK_WIDGET_REALIZED (widget))
     {
       range = GTK_RANGE (widget);
-      
+
+      _gtk_range_get_props (range, &slider_width, &trough_border,
+			    &stepper_size, NULL);
+        
       gdk_window_move_resize (range->trough,
                               allocation->x,
                               allocation->y + (allocation->height - widget->requisition.height) / 2,
                               allocation->width, widget->requisition.height);
       gdk_window_move_resize (range->step_back,
-                              widget->style->klass->xthickness,
-                              widget->style->klass->ythickness,
-                              RANGE_CLASS (widget)->stepper_size,
-                              widget->requisition.height - widget->style->klass->ythickness * 2);
+                              trough_border,
+                              trough_border,
+                              stepper_size,
+                              widget->requisition.height - trough_border * 2);
       gdk_window_move_resize (range->step_forw,
-                              allocation->width - widget->style->klass->xthickness -
-                              RANGE_CLASS (widget)->stepper_size,
-                              widget->style->klass->ythickness,
-                              RANGE_CLASS (widget)->stepper_size,
-                              widget->requisition.height - widget->style->klass->ythickness * 2);
+                              allocation->width - trough_border -
+                              stepper_size,
+                              trough_border,
+                              stepper_size,
+                              widget->requisition.height - trough_border * 2);
       gdk_window_resize (range->slider,
                          RANGE_CLASS (widget)->min_slider_size,
-                         widget->requisition.height - widget->style->klass->ythickness * 2);
+                         widget->requisition.height - trough_border * 2);
       
       gtk_range_slider_update (GTK_RANGE (widget));
     }
@@ -384,15 +409,18 @@
   gint step_forw_x;
   gint slider_width;
   gint slider_height;
+  gint stepper_spacing;
   gint left, right;
   gint width;
   
   g_return_if_fail (hscrollbar != NULL);
   g_return_if_fail (GTK_IS_HSCROLLBAR (hscrollbar));
-  
+
   if (GTK_WIDGET_REALIZED (hscrollbar))
     {
       range = GTK_RANGE (hscrollbar);
+
+      _gtk_range_get_props (range, NULL, NULL, NULL, &stepper_spacing);
       
       gdk_window_get_size (range->step_back, &step_back_width, NULL);
       gdk_window_get_position (range->step_back, &step_back_x, NULL);
@@ -400,8 +428,8 @@
       
       left = (step_back_x +
               step_back_width +
-              RANGE_CLASS (hscrollbar)->stepper_slider_spacing);
-      right = step_forw_x - RANGE_CLASS (hscrollbar)->stepper_slider_spacing;
+              stepper_spacing);
+      right = step_forw_x - stepper_spacing;
       width = right - left;
       
       if ((range->adjustment->page_size > 0) &&
diff -ur gtk+-1.3.0-orig/gtk/gtkrange.c gtk+-1.3.0/gtk/gtkrange.c
--- gtk+-1.3.0-orig/gtk/gtkrange.c	Sat Feb 19 22:19:56 2000
+++ gtk+-1.3.0/gtk/gtkrange.c	Mon Jun 23 13:01:34 2003
@@ -31,7 +31,8 @@
 
 
 #define SCROLL_TIMER_LENGTH  20
-#define SCROLL_INITIAL_DELAY 100
+#define SCROLL_INITIAL_DELAY 250  /* must hold button this long before ... */
+#define SCROLL_LATER_DELAY   100  /* ... it starts repeating at this rate  */
 #define SCROLL_DELAY_LENGTH  300
 
 #define RANGE_CLASS(w)  GTK_RANGE_CLASS (GTK_OBJECT (w)->klass)
@@ -398,10 +399,13 @@
   gint left;
   gint right;
   gint x;
+  gint trough_border;
 
   g_return_if_fail (range != NULL);
   g_return_if_fail (GTK_IS_RANGE (range));
 
+  _gtk_range_get_props (range, NULL, &trough_border, NULL, NULL);
+
   if (GTK_WIDGET_REALIZED (range))
     {
       gtk_range_trough_hdims (range, &left, &right);
@@ -427,7 +431,7 @@
       else if (x > right)
 	x = right;
 
-      gdk_window_move (range->slider, x, GTK_WIDGET (range)->style->klass->ythickness);
+      gdk_window_move (range->slider, x, trough_border);
     }
 }
 
@@ -437,10 +441,13 @@
   gint top;
   gint bottom;
   gint y;
+  gint trough_border;
 
   g_return_if_fail (range != NULL);
   g_return_if_fail (GTK_IS_RANGE (range));
 
+  _gtk_range_get_props (range, NULL, &trough_border, NULL, NULL);
+
   if (GTK_WIDGET_REALIZED (range))
     {
       gtk_range_trough_vdims (range, &top, &bottom);
@@ -466,7 +473,7 @@
       else if (y > bottom)
 	y = bottom;
 
-      gdk_window_move (range->slider, GTK_WIDGET (range)->style->klass->xthickness, y);
+      gdk_window_move (range->slider, trough_border, y);
     }
 }
 
@@ -476,7 +483,7 @@
 				 gint      y,
 				 gfloat	  *jump_perc)
 {
-  gint ythickness;
+  gint trough_border;
   gint trough_width;
   gint trough_height;
   gint slider_x;
@@ -486,17 +493,17 @@
   g_return_val_if_fail (range != NULL, GTK_TROUGH_NONE);
   g_return_val_if_fail (GTK_IS_RANGE (range), GTK_TROUGH_NONE);
 
-  ythickness = GTK_WIDGET (range)->style->klass->ythickness;
+  _gtk_range_get_props (range, NULL, &trough_border, NULL, NULL);
 
   gtk_range_trough_hdims (range, &left, &right);
   gdk_window_get_size (range->slider, &slider_length, NULL);
   right += slider_length;
 	      
-  if ((x > left) && (y > ythickness))
+  if ((x > left) && (y > trough_border))
     {
       gdk_window_get_size (range->trough, &trough_width, &trough_height);
 
-      if ((x < right) && (y < (trough_height - ythickness)))
+      if ((x < right) && (y < (trough_height - trough_border)))
 	{
 	  if (jump_perc)
 	    {
@@ -522,27 +529,27 @@
 				 gint      y,
 				 gfloat   *jump_perc)
 {
-  gint xthickness;
   gint trough_width;
   gint trough_height;
   gint slider_y;
   gint top, bottom;
   gint slider_length;
+  gint trough_border;
 
   g_return_val_if_fail (range != NULL, GTK_TROUGH_NONE);
   g_return_val_if_fail (GTK_IS_RANGE (range), GTK_TROUGH_NONE);
 
-  xthickness = GTK_WIDGET (range)->style->klass->xthickness;
+  _gtk_range_get_props (range, NULL, &trough_border, NULL, NULL);
 
   gtk_range_trough_vdims (range, &top, &bottom);
   gdk_window_get_size (range->slider, NULL, &slider_length);
   bottom += slider_length;
 	      
-  if ((x > xthickness) && (y > top))
+  if ((x > trough_border) && (y > top))
     {
       gdk_window_get_size (range->trough, &trough_width, &trough_height);
 
-      if ((x < (trough_width - xthickness) && (y < bottom)))
+      if ((x < (trough_width - trough_border) && (y < bottom)))
 	{
 	  if (jump_perc)
 	    {
@@ -803,6 +810,7 @@
 		  GdkEventExpose *event)
 {
   GtkRange *range;
+  gint trough_border;
 
   g_return_val_if_fail (widget != NULL, FALSE);
   g_return_val_if_fail (GTK_IS_RANGE (widget), FALSE);
@@ -810,6 +818,8 @@
 
   range = GTK_RANGE (widget);
 
+  _gtk_range_get_props (range, NULL, &trough_border, NULL, NULL);
+
   if (event->window == range->trough)
     {
       /* Don't redraw if we are only exposing the literal trough region.
@@ -817,15 +827,12 @@
        * trough-drawing handler. (Probably should really pass another
        * argument - the redrawn area to all the drawing functions)
        */
-      gint xt = widget->style->klass->xthickness;
-      gint yt = widget->style->klass->ythickness;
-      
-      if (!((event->area.x >= xt) &&
-	    (event->area.y >= yt) &&
+      if (!((event->area.x >= trough_border) &&
+	    (event->area.y >= trough_border) &&
 	    (event->area.x + event->area.width <= 
-	     widget->allocation.width - xt) &&
+	     widget->allocation.width - trough_border) &&
 	    (event->area.y + event->area.height <= 
-	     widget->allocation.height - yt)))
+	     widget->allocation.height - trough_border)))
 	gtk_range_draw_trough (range);
     }
   else if (event->window == widget->window)
@@ -920,8 +927,8 @@
 	  gtk_range_draw_step_back (range);
 	}
     }
-
-  return FALSE;
+  
+  return TRUE;
 }
 
 static gint
@@ -978,7 +985,7 @@
       range->click_child = 0;
     }
 
-  return FALSE;
+  return TRUE;
 }
 
 static gint
@@ -1052,7 +1059,7 @@
 	}
     }
 
-  return FALSE;
+  return TRUE;
 }
 
 static gint
@@ -1156,7 +1163,7 @@
 	gtk_range_draw_step_back (range);
     }
 
-  return FALSE;
+  return TRUE;
 }
 
 static gint
@@ -1195,7 +1202,7 @@
 	gtk_range_draw_step_back (range);
     }
 
-  return FALSE;
+  return TRUE;
 }
 
 static gint
@@ -1209,7 +1216,7 @@
   GTK_WIDGET_SET_FLAGS (widget, GTK_HAS_FOCUS);
   gtk_widget_draw_focus (widget);
 
-  return FALSE;
+  return TRUE;
 }
 
 static gint
@@ -1223,7 +1230,7 @@
   GTK_WIDGET_UNSET_FLAGS (widget, GTK_HAS_FOCUS);
   gtk_widget_draw_focus (widget);
 
-  return FALSE;
+  return TRUE;
 }
 
 static void
@@ -1416,6 +1423,35 @@
 }
 
 
+static gboolean
+gtk_range_timer_1st_time (GtkRange *range)
+{
+  /*
+   * If the real timeout function succeeds and the timeout is still set,
+   * replace it with a quicker one so successive scrolling goes faster.
+   */
+  gtk_object_ref (GTK_OBJECT (range));
+
+  if (RANGE_CLASS (range)->timer (range))
+    {
+      if (range->timer)
+	{
+	  /* We explicitely remove ourselves here in the paranoia
+	   * that due to things happening above in the callback
+	   * above, we might have been removed, and another added.
+	   */
+	  g_source_remove (range->timer);
+	  range->timer = gtk_timeout_add (SCROLL_LATER_DELAY,
+					  (GtkFunction) RANGE_CLASS (range)->timer,
+					  range);
+	}
+    }
+  
+  gtk_object_unref (GTK_OBJECT (range));
+  
+  return FALSE;  /* don't keep calling this function */
+}
+
 static void
 gtk_range_add_timer (GtkRange *range)
 {
@@ -1426,8 +1462,8 @@
     {
       range->need_timer = TRUE;
       range->timer = gtk_timeout_add (SCROLL_INITIAL_DELAY,
-				      (GtkFunction) RANGE_CLASS (range)->timer,
-				      (gpointer) range);
+				      (GtkFunction) gtk_range_timer_1st_time,
+				      range);
     }
 }
 
@@ -1515,25 +1551,29 @@
   gint tmp_width;
   gint tleft;
   gint tright;
+  gint stepper_spacing;
+  gint trough_border;
 
   g_return_if_fail (range != NULL);
 
   gdk_window_get_size (range->trough, &trough_width, NULL);
   gdk_window_get_size (range->slider, &slider_length, NULL);
 
-  tleft = GTK_WIDGET (range)->style->klass->xthickness;
-  tright = trough_width - slider_length - GTK_WIDGET (range)->style->klass->xthickness;
+  _gtk_range_get_props (range, NULL, &trough_border, NULL, &stepper_spacing);
+  
+  tleft = trough_border;
+  tright = trough_width - slider_length - trough_border;
 
   if (range->step_back)
     {
       gdk_window_get_size (range->step_back, &tmp_width, NULL);
-      tleft += (tmp_width + RANGE_CLASS (range)->stepper_slider_spacing);
+      tleft += (tmp_width + stepper_spacing);
     }
 
   if (range->step_forw)
     {
       gdk_window_get_size (range->step_forw, &tmp_width, NULL);
-      tright -= (tmp_width + RANGE_CLASS (range)->stepper_slider_spacing);
+      tright -= (tmp_width + stepper_spacing);
     }
 
   if (left)
@@ -1552,25 +1592,29 @@
   gint tmp_height;
   gint ttop;
   gint tbottom;
+  gint trough_border;
+  gint stepper_spacing;
 
   g_return_if_fail (range != NULL);
 
+  _gtk_range_get_props (range, NULL, &trough_border, NULL, &stepper_spacing);
+  
   gdk_window_get_size (range->trough, NULL, &trough_height);
   gdk_window_get_size (range->slider, NULL, &slider_length);
 
-  ttop = GTK_WIDGET (range)->style->klass->ythickness;
-  tbottom = trough_height - slider_length - GTK_WIDGET (range)->style->klass->ythickness;
+  ttop = trough_border;
+  tbottom = trough_height - slider_length - trough_border;
 
   if (range->step_back)
     {
       gdk_window_get_size (range->step_back, NULL, &tmp_height);
-      ttop += (tmp_height + RANGE_CLASS (range)->stepper_slider_spacing);
+      ttop += (tmp_height + stepper_spacing);
     }
 
   if (range->step_forw)
     {
       gdk_window_get_size (range->step_forw, NULL, &tmp_height);
-      tbottom -= (tmp_height + RANGE_CLASS (range)->stepper_slider_spacing);
+      tbottom -= (tmp_height + stepper_spacing);
     }
 
   if (top)
@@ -1616,3 +1660,32 @@
 	}
     }
 }
+
+void
+_gtk_range_get_props (GtkRange *range,
+		      gint     *slider_width,
+		      gint     *trough_border,
+		      gint     *stepper_size,
+		      gint     *stepper_spacing)
+{
+  GtkWidget *widget =  GTK_WIDGET (range);
+  
+
+  if (slider_width)
+    *slider_width = gtk_style_get_prop_experimental (widget->style,
+						     "GtkRange::slider_width",
+						     RANGE_CLASS (widget)->slider_width);
+  if (trough_border)
+    *trough_border = gtk_style_get_prop_experimental (widget->style,
+						      "GtkRange::trough_border",
+						      widget->style->klass->xthickness);
+  if (stepper_size)
+    *stepper_size = gtk_style_get_prop_experimental (widget->style,
+						     "GtkRange::stepper_size",
+						     RANGE_CLASS (widget)->stepper_size);
+  if (stepper_spacing)
+    *stepper_spacing = gtk_style_get_prop_experimental (widget->style,
+							"GtkRange::stepper_spacing",
+							RANGE_CLASS (widget)->stepper_slider_spacing);
+}
+
diff -ur gtk+-1.3.0-orig/gtk/gtkrange.h gtk+-1.3.0/gtk/gtkrange.h
--- gtk+-1.3.0-orig/gtk/gtkrange.h	Sun Feb 13 08:16:48 2000
+++ gtk+-1.3.0/gtk/gtkrange.h	Mon Jun 23 13:01:34 2003
@@ -151,6 +151,11 @@
 						 gint           xdelta,
 						 gint           ydelta);
 
+void _gtk_range_get_props (GtkRange *range,
+			   gint     *slider_width,
+			   gint     *trough_border,
+			   gint     *stepper_size,
+			   gint     *stepper_spacing);
 
 #ifdef __cplusplus
 }
diff -ur gtk+-1.3.0-orig/gtk/gtkstyle.c gtk+-1.3.0/gtk/gtkstyle.c
--- gtk+-1.3.0-orig/gtk/gtkstyle.c	Tue Mar 14 19:57:24 2000
+++ gtk+-1.3.0/gtk/gtkstyle.c	Mon Jun 23 12:18:16 2003
@@ -3813,3 +3813,98 @@
   
   style->klass->draw_handle (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, orientation);
 }
+
+/* Temporary GTK+-1.2.9 local patch for use only in theme engines.
+ * Simple integer geometry properties.
+ */
+typedef struct _StylePropPair StylePropPair;
+
+struct _StylePropPair
+{
+  gchar *name;
+  gint value;
+};
+
+static void
+style_prop_hash_destroy_pair (gpointer key, gpointer value, gpointer data)
+{
+  StylePropPair *pair = value;
+
+  g_free (pair->name);
+  g_free (pair);
+}
+
+static void
+style_prop_hash_destroy (gpointer data)
+{
+  GHashTable *prop_hash = data;
+
+  g_hash_table_foreach (prop_hash, style_prop_hash_destroy_pair, NULL);
+  g_hash_table_destroy (prop_hash);
+}
+
+static GHashTable *
+style_get_prop_hash (GtkStyle *style)
+{
+  static GQuark id = 0;
+  GHashTable *prop_hash;
+
+  if (!id)
+    id = g_quark_from_static_string ("gtk-style-prop-hash");
+
+  prop_hash = g_dataset_id_get_data (style, id);
+  if (!prop_hash)
+    {
+      prop_hash = g_hash_table_new (g_str_hash, g_str_equal);
+      g_dataset_id_set_data_full (style, id,
+				  prop_hash, style_prop_hash_destroy);
+    }
+
+  return prop_hash;
+}
+
+void
+gtk_style_set_prop_experimental (GtkStyle    *style,
+				 const gchar *name,
+				 gint         value)
+{
+  GHashTable *prop_hash;
+  StylePropPair *pair;
+
+  g_return_if_fail (style != NULL);
+  g_return_if_fail (name != NULL);
+
+  prop_hash = style_get_prop_hash (style);
+
+  pair = g_hash_table_lookup (prop_hash, name);
+  if (!pair)
+    {
+      pair = g_new (StylePropPair, 1);
+      pair->name = g_strdup (name);
+
+      g_hash_table_insert (prop_hash, pair->name, pair);
+    }
+
+  pair->value = value;
+}
+
+gint
+gtk_style_get_prop_experimental (GtkStyle    *style,
+				 const gchar *name,
+				 gint         default_value)
+{
+  GHashTable *prop_hash;
+  StylePropPair *pair;
+
+  g_return_val_if_fail (style != NULL, default_value);
+  g_return_val_if_fail (name != NULL, default_value);
+
+  prop_hash = style_get_prop_hash (style);
+  pair = g_hash_table_lookup (prop_hash, name);
+
+  if (pair)
+    return pair->value;
+  else
+    return default_value;
+}
+
diff -ur gtk+-1.3.0-orig/gtk/gtkstyle.h gtk+-1.3.0/gtk/gtkstyle.h
--- gtk+-1.3.0-orig/gtk/gtkstyle.h	Fri Jan 21 21:53:36 2000
+++ gtk+-1.3.0/gtk/gtkstyle.h	Mon Jun 23 12:18:52 2003
@@ -770,6 +770,16 @@
 			   gint             width,
 			   gint             height,
 			   GtkOrientation   orientation);
+			   
+/* Temporary GTK+-1.2.9 local patch for use only in theme engines.
+ * Simple integer geometry properties.
+ */
+void gtk_style_set_prop_experimental (GtkStyle    *style,
+				      const gchar *name,
+				      gint         value);
+gint gtk_style_get_prop_experimental (GtkStyle    *style,
+				      const gchar *name,
+				      gint         default_value);
 
 #ifdef __cplusplus
 }
diff -ur gtk+-1.3.0-orig/gtk/gtkvscrollbar.c gtk+-1.3.0/gtk/gtkvscrollbar.c
--- gtk+-1.3.0-orig/gtk/gtkvscrollbar.c	Thu Feb 22 20:47:42 2001
+++ gtk+-1.3.0/gtk/gtkvscrollbar.c	Mon Jun 23 13:03:44 2003
@@ -47,6 +47,8 @@
                                              GtkArg             *arg,
                                              guint               arg_id);
 static void gtk_vscrollbar_realize          (GtkWidget          *widget);
+static void gtk_vscrollbar_size_request     (GtkWidget          *widget,
+                                             GtkRequisition     *requisition);
 static void gtk_vscrollbar_size_allocate    (GtkWidget          *widget,
                                              GtkAllocation      *allocation);
 static void gtk_vscrollbar_draw_step_forw   (GtkRange           *range);
@@ -104,6 +106,7 @@
   object_class->get_arg = gtk_vscrollbar_get_arg;
   
   widget_class->realize = gtk_vscrollbar_realize;
+  widget_class->size_request = gtk_vscrollbar_size_request;
   widget_class->size_allocate = gtk_vscrollbar_size_allocate;
   
   range_class->draw_step_forw = gtk_vscrollbar_draw_step_forw;
@@ -156,18 +159,6 @@
 static void
 gtk_vscrollbar_init (GtkVScrollbar *vscrollbar)
 {
-  GtkWidget *widget;
-  GtkRequisition *requisition;
-  
-  widget = GTK_WIDGET (vscrollbar);
-  requisition = &widget->requisition;
-  
-  requisition->width = (RANGE_CLASS (widget)->slider_width +
-                        widget->style->klass->xthickness * 2);
-  requisition->height = (RANGE_CLASS (widget)->min_slider_size +
-                         RANGE_CLASS (widget)->stepper_size +
-                         RANGE_CLASS (widget)->stepper_slider_spacing +
-                         widget->style->klass->ythickness) * 2;
 }
 
 GtkWidget*
@@ -189,6 +180,9 @@
   GtkRange *range;
   GdkWindowAttr attributes;
   gint attributes_mask;
+  gint slider_width;
+  gint stepper_size;
+  gint trough_border;
   
   g_return_if_fail (widget != NULL);
   g_return_if_fail (GTK_IS_VSCROLLBAR (widget));
@@ -196,6 +190,9 @@
   GTK_WIDGET_SET_FLAGS (widget, GTK_REALIZED);
   range = GTK_RANGE (widget);
   
+  _gtk_range_get_props (range, &slider_width, &trough_border,
+			&stepper_size, NULL);
+
   attributes.x = widget->allocation.x + (widget->allocation.width - widget->requisition.width) / 2;
   attributes.y = widget->allocation.y;
   attributes.width = widget->requisition.width;
@@ -217,22 +214,22 @@
   range->trough = widget->window;
   gdk_window_ref (range->trough);
   
-  attributes.x = widget->style->klass->xthickness;
-  attributes.y = widget->style->klass->ythickness;
-  attributes.width = RANGE_CLASS (widget)->stepper_size;
-  attributes.height = RANGE_CLASS (widget)->stepper_size;
+  attributes.x = trough_border;
+  attributes.y = trough_border;
+  attributes.width = stepper_size;
+  attributes.height = stepper_size;
   
   range->step_back = gdk_window_new (range->trough, &attributes, attributes_mask);
   
   attributes.y = (widget->allocation.height -
-                  widget->style->klass->ythickness -
-                  RANGE_CLASS (widget)->stepper_size);
+                  trough_border -
+                  stepper_size);
   
   range->step_forw = gdk_window_new (range->trough, &attributes, attributes_mask);
   
-  attributes.x = widget->style->klass->ythickness;
+  attributes.x = trough_border;
   attributes.y = 0;
-  attributes.width = RANGE_CLASS (widget)->slider_width;
+  attributes.width = slider_width;
   attributes.height = RANGE_CLASS (widget)->min_slider_size;
   attributes.event_mask |= (GDK_BUTTON_MOTION_MASK |
                             GDK_POINTER_MOTION_HINT_MASK);
@@ -260,10 +257,34 @@
 }
 
 static void
+gtk_vscrollbar_size_request (GtkWidget      *widget,
+			     GtkRequisition *requisition)
+{
+  gint slider_width;
+  gint trough_border;
+  gint stepper_size;
+  gint stepper_spacing;
+  
+  GtkRange *range = GTK_RANGE (widget);
+
+  _gtk_range_get_props (range, &slider_width, &trough_border,
+			&stepper_size, &stepper_spacing);
+  
+  requisition->width = (slider_width +
+                        trough_border * 2);
+  requisition->height = (RANGE_CLASS (widget)->min_slider_size +
+                         stepper_size +
+                         stepper_spacing +
+                         trough_border) * 2;
+}
+
+static void
 gtk_vscrollbar_size_allocate (GtkWidget     *widget,
                               GtkAllocation *allocation)
 {
   GtkRange *range;
+  gint trough_border;
+  gint stepper_size;
   
   g_return_if_fail (widget != NULL);
   g_return_if_fail (GTK_IS_VSCROLLBAR (widget));
@@ -273,24 +294,26 @@
   if (GTK_WIDGET_REALIZED (widget))
     {
       range = GTK_RANGE (widget);
+
+      _gtk_range_get_props (range, NULL, &trough_border, &stepper_size, NULL);
       
       gdk_window_move_resize (range->trough,
                               allocation->x + (allocation->width - widget->requisition.width) / 2,
                               allocation->y,
                               widget->requisition.width, allocation->height);
       gdk_window_move_resize (range->step_back,
-                              widget->style->klass->xthickness,
-                              widget->style->klass->ythickness,
-                              widget->requisition.width - widget->style->klass->xthickness * 2,
-                              RANGE_CLASS (widget)->stepper_size);
+                              trough_border,
+                              trough_border,
+                              widget->requisition.width - trough_border * 2,
+                              stepper_size);
       gdk_window_move_resize (range->step_forw,
-                              widget->style->klass->xthickness,
-                              allocation->height - widget->style->klass->ythickness -
-                              RANGE_CLASS (widget)->stepper_size,
-                              widget->requisition.width - widget->style->klass->xthickness * 2,
-                              RANGE_CLASS (widget)->stepper_size);
+                              trough_border,
+                              allocation->height - trough_border -
+                              stepper_size,
+                              widget->requisition.width - trough_border * 2,
+                              stepper_size);
       gdk_window_resize (range->slider,
-                         widget->requisition.width - widget->style->klass->xthickness * 2,
+                         widget->requisition.width - trough_border * 2,
                          RANGE_CLASS (range)->min_slider_size);
       
       gtk_range_slider_update (GTK_RANGE (widget));
@@ -382,6 +405,7 @@
   gint step_back_y;
   gint step_back_height;
   gint step_forw_y;
+  gint stepper_spacing;
   gint slider_width;
   gint slider_height;
   gint top, bottom;
@@ -394,14 +418,16 @@
     {
       range = GTK_RANGE (vscrollbar);
       
+      _gtk_range_get_props (range, NULL, NULL, NULL, &stepper_spacing);
+      
       gdk_window_get_size (range->step_back, NULL, &step_back_height);
       gdk_window_get_position (range->step_back, NULL, &step_back_y);
       gdk_window_get_position (range->step_forw, NULL, &step_forw_y);
       
       top = (step_back_y +
              step_back_height +
-             RANGE_CLASS (vscrollbar)->stepper_slider_spacing);
-      bottom = step_forw_y - RANGE_CLASS (vscrollbar)->stepper_slider_spacing;
+             stepper_spacing);
+      bottom = step_forw_y - stepper_spacing;
       height = bottom - top;
       
       if ((range->adjustment->page_size > 0) &&
